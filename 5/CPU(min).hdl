// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// とりあえずやってみる。命令を実行。次にやる命令を決めて持ってくる。
    //// p122の図を基にやってみる

    //// 図のc ここでいうselをどう表すべきか。ALUの出力なのか次の命令かを表すのはinstructionの何処なのかわかればいい
    Mux16(a=ALUout,b=instruction,sel=instruction[0],out=outinorinst);

    ////Aregister
    Register(in=outinorinst,load=instruction[10],out=outAregister);

    ////inMが最初に入るところ
    Mux16(a=outAregister,b=inM,sel=instruction[3],out=outMorA);

    ////Dregister p91のdestの使用のところに、dの何処で何処に保存するかを判定するとあるので
    Register(in=ALUout,load=instruction[11],out=outD);

    ALU(x=outD,y=outMorA,zx=instruction[4],nx=instruction[5],zy=instruction[6],ny=instruction[7],f=instruction[8],no=instruction[9],out=ALUout,zr=zr,ng=ng);

    ////outM
    Or16(a=false,b=ALUout,out=outM);

    ////writeM
    Or(a=false,b=instruction[12],out=writeM);

    ////addressM
    Or16(a=false,b=outAregister,out=addressM16);
    

    And(a=ng,b=instruction[13],out=ngJump);
    And(a=zr,b=instruction[14],out=zrJump);
    ////ALUの出力が正の場合
    Or(a=ng,b=zr,out=notPos);
    Not(in=notPos,out=pos);
    And(a=pos,b=instruction[15],out=posJump);
    
    Or(a=ngJump,b=zrJump,out=jump1);
    Or(a=jump1,b=posJump,out=jump);
    Not(in=jump,out=notJump);

    PC(in=outAregister,reset=reset,load=jump,inc=notJump,out=pc);

}
